// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Woz.BevragenProxy.Specifications
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature : object, Xunit.IClassFixture<BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BepaalRelevanteWaarden.feature"
#line hidden
        
        public BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature(BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FixtureData fixtureData, Woz_BevragenProxy_Specifications_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl"), "", "Bepaal relevante waarden voor een WOZ-object", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="geen waarden")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "geen waarden")]
        public virtual void GeenWaarden()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("geen waarden", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("een WOZ-object bevat geen waarden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 6
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 7
 testRunner.Then("bevat het WOZ-object geen waarden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="leeg waarden lijst")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "leeg waarden lijst")]
        public virtual void LeegWaardenLijst()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("leeg waarden lijst", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
#line 10
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table1, "Gegeven ");
#line hidden
#line 12
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
#line 13
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table2, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep")]
        public virtual void MeerdereJarenMetZelfdeEigenaarEnZonderBezwaarOfBeroep()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table3.AddRow(new string[] {
                            "431000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "390000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "340000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "340000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "310000",
                            "2015-01-01",
                            "2016-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "308000",
                            "2014-01-01",
                            "2015-01-01",
                            "beschikking_genomen"});
#line 17
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table3, "Gegeven ");
#line hidden
#line 25
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table4.AddRow(new string[] {
                            "431000",
                            "2019-01-01"});
                table4.AddRow(new string[] {
                            "390000",
                            "2018-01-01"});
                table4.AddRow(new string[] {
                            "340000",
                            "2017-01-01"});
                table4.AddRow(new string[] {
                            "340000",
                            "2016-01-01"});
                table4.AddRow(new string[] {
                            "310000",
                            "2015-01-01"});
                table4.AddRow(new string[] {
                            "308000",
                            "2014-01-01"});
#line 26
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table4, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
            "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
            "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum")]
        public virtual void WOZ_ObjectWijzigtGedurendeEenJaarVanEigenaarBijMeerdereWaardenMetZelfdeWaardepeildatumGebruikenWeDeWaardeMetDeMeestRecenteIngangsdatum()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
                    "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table5.AddRow(new string[] {
                            "171000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table5.AddRow(new string[] {
                            "163000",
                            "2018-01-01",
                            "2019-03-17",
                            "beschikking_genomen"});
                table5.AddRow(new string[] {
                            "160000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table5.AddRow(new string[] {
                            "155000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table5.AddRow(new string[] {
                            "149000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
#line 36
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table5, "Gegeven ");
#line hidden
#line 43
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table6.AddRow(new string[] {
                            "171000",
                            "2019-01-01"});
                table6.AddRow(new string[] {
                            "163000",
                            "2018-01-01"});
                table6.AddRow(new string[] {
                            "155000",
                            "2017-01-01"});
                table6.AddRow(new string[] {
                            "149000",
                            "2016-01-01"});
#line 44
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table6, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar")]
        public virtual void BelanghebbendeKrijgtVerlagingVanDeWOZ_WaardeNaBezwaar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table7.AddRow(new string[] {
                            "195000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table7.AddRow(new string[] {
                            "176000",
                            "2018-01-01",
                            "2019-01-01",
                            "bezwaar_ingediend"});
                table7.AddRow(new string[] {
                            "152000",
                            "2017-01-01",
                            "2018-01-01",
                            "bezwaar_veranderd"});
                table7.AddRow(new string[] {
                            "164000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
#line 52
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table7, "Gegeven ");
#line hidden
#line 58
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "indicatieBezwaarBeroep"});
                table8.AddRow(new string[] {
                            "195000",
                            "2019-01-01",
                            ""});
                table8.AddRow(new string[] {
                            "176000",
                            "2018-01-01",
                            "true"});
                table8.AddRow(new string[] {
                            "152000",
                            "2017-01-01",
                            ""});
                table8.AddRow(new string[] {
                            "164000",
                            "2016-01-01",
                            ""});
#line 59
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table8, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
            "uwe belanghebbende eigenaar")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
            "uwe belanghebbende eigenaar")]
        public virtual void VerlagingVanDeWOZ_WaardeNaBeroepNietZichtbaarDoorLatereIngangsdatumNieuweBelanghebbendeEigenaar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
                    "uwe belanghebbende eigenaar", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table9.AddRow(new string[] {
                            "266000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table9.AddRow(new string[] {
                            "223000",
                            "2018-01-01",
                            "2019-05-01",
                            "beschikking_genomen"});
                table9.AddRow(new string[] {
                            "190000",
                            "2018-01-01",
                            "2019-01-01",
                            "beroep_veranderd"});
                table9.AddRow(new string[] {
                            "189000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 67
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table9, "Gegeven ");
#line hidden
#line 73
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table10.AddRow(new string[] {
                            "266000",
                            "2019-01-01"});
                table10.AddRow(new string[] {
                            "223000",
                            "2018-01-01"});
                table10.AddRow(new string[] {
                            "189000",
                            "2017-01-01"});
#line 74
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table10, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="een vernietigde beschikking wordt genegeerd")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "een vernietigde beschikking wordt genegeerd")]
        public virtual void EenVernietigdeBeschikkingWordtGenegeerd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("een vernietigde beschikking wordt genegeerd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table11.AddRow(new string[] {
                            "295000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table11.AddRow(new string[] {
                            "210000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd"});
                table11.AddRow(new string[] {
                            "283000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table11.AddRow(new string[] {
                            "274000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 81
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table11, "Gegeven ");
#line hidden
#line 87
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table12.AddRow(new string[] {
                            "295000",
                            "2019-01-01"});
                table12.AddRow(new string[] {
                            "283000",
                            "2018-01-01"});
                table12.AddRow(new string[] {
                            "274000",
                            "2017-01-01"});
#line 88
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table12, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
            "dezelfde peildatum en ingangsdatum niet")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
            "dezelfde peildatum en ingangsdatum niet")]
        public virtual void EenVernietigdeBeschikkingWordtGenegeerdMaarDeAndereBeschikkingEnVoorDezelfdePeildatumEnIngangsdatumNiet()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
                    "dezelfde peildatum en ingangsdatum niet", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table13.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table13.AddRow(new string[] {
                            "282000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd, bezwaar_gehandhaafd"});
                table13.AddRow(new string[] {
                            "306000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table13.AddRow(new string[] {
                            "266000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 95
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table13, "Gegeven ");
#line hidden
#line 101
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table14.AddRow(new string[] {
                            "317000",
                            "2019-01-01"});
                table14.AddRow(new string[] {
                            "282000",
                            "2018-01-01"});
                table14.AddRow(new string[] {
                            "266000",
                            "2017-01-01"});
#line 102
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table14, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
            "negeerd")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
            "negeerd")]
        public virtual void MeerdereVernietigdeBeschikkingenMetZelfdePeildatumEnIngangsdatumWordenGenegeerd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
                    "negeerd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table15.AddRow(new string[] {
                            "455000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table15.AddRow(new string[] {
                            "440000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd, beschikking_vernietigd"});
                table15.AddRow(new string[] {
                            "430000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table15.AddRow(new string[] {
                            "410000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 109
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table15, "Gegeven ");
#line hidden
#line 115
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table16.AddRow(new string[] {
                            "455000",
                            "2019-01-01"});
                table16.AddRow(new string[] {
                            "430000",
                            "2018-01-01"});
                table16.AddRow(new string[] {
                            "410000",
                            "2017-01-01"});
#line 116
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table16, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="indicatieBezwaarBeroep wanneer een van de statussen bezwaar, (hoger)beroep of cas" +
            "satie ingesteld maar niet afgehandeld is.")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "indicatieBezwaarBeroep wanneer een van de statussen bezwaar, (hoger)beroep of cas" +
            "satie ingesteld maar niet afgehandeld is.")]
        [Xunit.InlineDataAttribute("10", "bezwaar_ingediend", new string[0])]
        [Xunit.InlineDataAttribute("20", "beroep_aangetekend", new string[0])]
        [Xunit.InlineDataAttribute("23", "hoger_beroep_aangetekend", new string[0])]
        [Xunit.InlineDataAttribute("30", "cassatie_ingesteld", new string[0])]
        public virtual void IndicatieBezwaarBeroepWanneerEenVanDeStatussenBezwaarHogerBeroepOfCassatieIngesteldMaarNietAfgehandeldIs_(string statuscode, string status, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("statuscode", statuscode);
            argumentsOfScenario.Add("status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("indicatieBezwaarBeroep wanneer een van de statussen bezwaar, (hoger)beroep of cas" +
                    "satie ingesteld maar niet afgehandeld is.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table17.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "2020-01-01",
                            string.Format("{0}", status)});
#line 123
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table17, "Gegeven ");
#line hidden
#line 126
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "indicatieBezwaarBeroep"});
                table18.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "true"});
#line 127
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table18, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="indicatieBezwaarBeroep wordt niet opgenomen wanneer er geen bezwaar, (hoger)beroe" +
            "p of cassatie is ingesteld, of deze is afgehandeld.")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "indicatieBezwaarBeroep wordt niet opgenomen wanneer er geen bezwaar, (hoger)beroe" +
            "p of cassatie is ingesteld, of deze is afgehandeld.")]
        [Xunit.InlineDataAttribute("beschikking_genomen", "01", "beschikking genomen", new string[0])]
        [Xunit.InlineDataAttribute("beschikking_herzien", "03", "herzieningsbeschikking", new string[0])]
        [Xunit.InlineDataAttribute("bezwaar_gehandhaafd", "11", "bezwaar afgehandeld, beschikking gehandhaafd", new string[0])]
        [Xunit.InlineDataAttribute("bezwaar_veranderd", "12", "bezwaar afgehandeld, vastgestelde waarde veranderd", new string[0])]
        [Xunit.InlineDataAttribute("waarde_ambtshalve_verminderd", "13", "waardeambtshalveverminderd", new string[0])]
        [Xunit.InlineDataAttribute("beroep_gehandhaafd", "21", "uitspraak beroep, beschikking gehandhaafd", new string[0])]
        [Xunit.InlineDataAttribute("beroep_veranderd", "22", "uitspraak beroep, vastgestelde waarde veranderd", new string[0])]
        [Xunit.InlineDataAttribute("hoger_beroep_gehandhaafd", "24", "uitspraak hoger beroep, beschikking gehandhaafd", new string[0])]
        [Xunit.InlineDataAttribute("hoger_beroep_veranderd", "25", "uitspraak hoger beroep, vastgestelde waarde veranderd", new string[0])]
        [Xunit.InlineDataAttribute("hoge_raad_gehandhaafd", "31", "arrest Hoge Raad, beschikking gehandhaafd", new string[0])]
        [Xunit.InlineDataAttribute("hoge_raad_veranderd", "32", "arrest Hoge Raad, vastgestelde waarde veranderd", new string[0])]
        [Xunit.InlineDataAttribute("hoge_raad_geding_verwezen", "33", "arrestHogeRaad,gedingverwezen", new string[0])]
        [Xunit.InlineDataAttribute("voorlopige_aanslag", "99", "waarde te gebruiken voor voorlopige aanslag", new string[0])]
        public virtual void IndicatieBezwaarBeroepWordtNietOpgenomenWanneerErGeenBezwaarHogerBeroepOfCassatieIsIngesteldOfDezeIsAfgehandeld_(string status_Enum, string statuscode, string status, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("status_enum", status_Enum);
            argumentsOfScenario.Add("statuscode", statuscode);
            argumentsOfScenario.Add("status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("indicatieBezwaarBeroep wordt niet opgenomen wanneer er geen bezwaar, (hoger)beroe" +
                    "p of cassatie is ingesteld, of deze is afgehandeld.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table19.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "2020-01-01",
                            string.Format("{0}", status_Enum)});
#line 139
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table19, "Gegeven ");
#line hidden
#line 142
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 143
 testRunner.Then("heeft de waarden van het WOZ-object geen property indicatieBezwaarBeroep", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="indicatieBezwaarBeroep wanneer er meerdere statussen zijn bij een waardepeildatum" +
            " en ingangsdatum")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "indicatieBezwaarBeroep wanneer er meerdere statussen zijn bij een waardepeildatum" +
            " en ingangsdatum")]
        public virtual void IndicatieBezwaarBeroepWanneerErMeerdereStatussenZijnBijEenWaardepeildatumEnIngangsdatum()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("indicatieBezwaarBeroep wanneer er meerdere statussen zijn bij een waardepeildatum" +
                    " en ingangsdatum", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table20.AddRow(new string[] {
                            "437000",
                            "2019-01-01",
                            "2020-01-01",
                            "beroep_gehandhaafd, beroep_aangetekend"});
                table20.AddRow(new string[] {
                            "392000",
                            "2018-01-01",
                            "2019-01-01",
                            "hoger_beroep_aangetekend, beschikking_genomen"});
#line 162
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table20, "Gegeven ");
#line hidden
#line 166
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "indicatieBezwaarBeroep"});
                table21.AddRow(new string[] {
                            "437000",
                            "2019-01-01",
                            "true"});
                table21.AddRow(new string[] {
                            "392000",
                            "2018-01-01",
                            "true"});
#line 167
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table21, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="indicatieBezwaarBeroep wanneer er bezwaar, (hoger)beroep of cassatie loopt bij ni" +
            "et de meest recente ingangsdatum")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "indicatieBezwaarBeroep wanneer er bezwaar, (hoger)beroep of cassatie loopt bij ni" +
            "et de meest recente ingangsdatum")]
        public virtual void IndicatieBezwaarBeroepWanneerErBezwaarHogerBeroepOfCassatieLooptBijNietDeMeestRecenteIngangsdatum()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("indicatieBezwaarBeroep wanneer er bezwaar, (hoger)beroep of cassatie loopt bij ni" +
                    "et de meest recente ingangsdatum", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table22.AddRow(new string[] {
                            "215000",
                            "2018-01-01",
                            "2019-05-01",
                            "beschikking_genomen"});
                table22.AddRow(new string[] {
                            "215000",
                            "2018-01-01",
                            "2019-01-01",
                            "beroep_aangetekend"});
#line 173
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table22, "Gegeven ");
#line hidden
#line 177
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum"});
                table23.AddRow(new string[] {
                            "215000",
                            "2018-01-01"});
#line 178
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table23, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
