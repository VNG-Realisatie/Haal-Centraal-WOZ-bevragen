// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Woz.BevragenProxy.Specifications
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature : object, Xunit.IClassFixture<BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BepaalRelevanteWaarden.feature"
#line hidden
        
        public BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature(BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FixtureData fixtureData, Woz_BevragenProxy_Specifications_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl"), "", "Bepaal relevante waarden voor een WOZ-object", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep")]
        public virtual void MeerdereJarenMetZelfdeEigenaarEnZonderBezwaarOfBeroep()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("meerdere jaren met zelfde eigenaar en zonder bezwaar of beroep", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table1.AddRow(new string[] {
                            "431000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table1.AddRow(new string[] {
                            "390000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table1.AddRow(new string[] {
                            "340000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table1.AddRow(new string[] {
                            "340000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
                table1.AddRow(new string[] {
                            "310000",
                            "2015-01-01",
                            "2016-01-01",
                            "beschikking_genomen"});
                table1.AddRow(new string[] {
                            "308000",
                            "2014-01-01",
                            "2015-01-01",
                            "beschikking_genomen"});
#line 5
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table1, "Gegeven ");
#line hidden
#line 13
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table2.AddRow(new string[] {
                            "431000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table2.AddRow(new string[] {
                            "390000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table2.AddRow(new string[] {
                            "340000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table2.AddRow(new string[] {
                            "340000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
                table2.AddRow(new string[] {
                            "310000",
                            "2015-01-01",
                            "2016-01-01",
                            "beschikking_genomen"});
                table2.AddRow(new string[] {
                            "308000",
                            "2014-01-01",
                            "2015-01-01",
                            "beschikking_genomen"});
#line 14
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table2, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
            "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
            "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum")]
        public virtual void WOZ_ObjectWijzigtGedurendeEenJaarVanEigenaarBijMeerdereWaardenMetZelfdeWaardepeildatumGebruikenWeDeWaardeMetDeMeestRecenteIngangsdatum()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WOZ-object wijzigt gedurende een jaar van eigenaar: bij meerdere waarden met zelf" +
                    "de waardepeildatum gebruiken we de waarde met de meest recente ingangsdatum", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table3.AddRow(new string[] {
                            "171000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "163000",
                            "2018-01-01",
                            "2019-03-17",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "160000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "155000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table3.AddRow(new string[] {
                            "149000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
#line 24
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table3, "Gegeven ");
#line hidden
#line 31
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table4.AddRow(new string[] {
                            "171000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table4.AddRow(new string[] {
                            "163000",
                            "2018-01-01",
                            "2019-03-17",
                            "beschikking_genomen"});
                table4.AddRow(new string[] {
                            "155000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
                table4.AddRow(new string[] {
                            "149000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
#line 32
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table4, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar")]
        public virtual void BelanghebbendeKrijgtVerlagingVanDeWOZ_WaardeNaBezwaar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Belanghebbende krijgt verlaging van de WOZ-waarde na bezwaar", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table5.AddRow(new string[] {
                            "195000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table5.AddRow(new string[] {
                            "176000",
                            "2018-01-01",
                            "2019-01-01",
                            "bezwaar_ingediend"});
                table5.AddRow(new string[] {
                            "152000",
                            "2017-01-01",
                            "2018-01-01",
                            "bezwaar_veranderd"});
                table5.AddRow(new string[] {
                            "164000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen"});
#line 40
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table5, "Gegeven ");
#line hidden
#line 46
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen",
                            "indicatieBezwaarBeroep"});
                table6.AddRow(new string[] {
                            "195000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen",
                            ""});
                table6.AddRow(new string[] {
                            "176000",
                            "2018-01-01",
                            "2019-01-01",
                            "bezwaar_ingediend",
                            "true"});
                table6.AddRow(new string[] {
                            "152000",
                            "2017-01-01",
                            "2018-01-01",
                            "bezwaar_veranderd",
                            ""});
                table6.AddRow(new string[] {
                            "164000",
                            "2016-01-01",
                            "2017-01-01",
                            "beschikking_genomen",
                            ""});
#line 47
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table6, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
            "uwe belanghebbende eigenaar")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
            "uwe belanghebbende eigenaar")]
        public virtual void VerlagingVanDeWOZ_WaardeNaBeroepNietZichtbaarDoorLatereIngangsdatumNieuweBelanghebbendeEigenaar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verlaging van de WOZ-waarde na beroep niet zichtbaar door latere ingangsdatum nie" +
                    "uwe belanghebbende eigenaar", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table7.AddRow(new string[] {
                            "266000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table7.AddRow(new string[] {
                            "223000",
                            "2018-01-01",
                            "2019-05-01",
                            "beschikking_genomen"});
                table7.AddRow(new string[] {
                            "190000",
                            "2018-01-01",
                            "2019-01-01",
                            "beroep_veranderd"});
                table7.AddRow(new string[] {
                            "189000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 55
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table7, "Gegeven ");
#line hidden
#line 61
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table8.AddRow(new string[] {
                            "266000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table8.AddRow(new string[] {
                            "223000",
                            "2018-01-01",
                            "2019-05-01",
                            "beschikking_genomen"});
                table8.AddRow(new string[] {
                            "189000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 62
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table8, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="een vernietigde beschikking wordt genegeerd")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "een vernietigde beschikking wordt genegeerd")]
        public virtual void EenVernietigdeBeschikkingWordtGenegeerd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("een vernietigde beschikking wordt genegeerd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table9.AddRow(new string[] {
                            "295000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table9.AddRow(new string[] {
                            "210000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd"});
                table9.AddRow(new string[] {
                            "283000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table9.AddRow(new string[] {
                            "274000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 69
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table9, "Gegeven ");
#line hidden
#line 75
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table10.AddRow(new string[] {
                            "295000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table10.AddRow(new string[] {
                            "283000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table10.AddRow(new string[] {
                            "274000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 76
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table10, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
            "dezelfde peildatum en ingangsdatum niet")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
            "dezelfde peildatum en ingangsdatum niet")]
        public virtual void EenVernietigdeBeschikkingWordtGenegeerdMaarDeAndereBeschikkingEnVoorDezelfdePeildatumEnIngangsdatumNiet()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("een vernietigde beschikking wordt genegeerd, maar de andere beschikking(en) voor " +
                    "dezelfde peildatum en ingangsdatum niet", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table11.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table11.AddRow(new string[] {
                            "282000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd, bezwaar_gehandhaafd"});
                table11.AddRow(new string[] {
                            "306000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table11.AddRow(new string[] {
                            "266000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 83
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table11, "Gegeven ");
#line hidden
#line 89
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table12.AddRow(new string[] {
                            "317000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table12.AddRow(new string[] {
                            "282000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd, bezwaar_gehandhaafd"});
                table12.AddRow(new string[] {
                            "266000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 90
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table12, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
            "negeerd")]
        [Xunit.TraitAttribute("FeatureTitle", "Bepaal relevante waarden voor een WOZ-object")]
        [Xunit.TraitAttribute("Description", "meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
            "negeerd")]
        public virtual void MeerdereVernietigdeBeschikkingenMetZelfdePeildatumEnIngangsdatumWordenGenegeerd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("meerdere vernietigde beschikkingen met zelfde peildatum en ingangsdatum worden ge" +
                    "negeerd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table13.AddRow(new string[] {
                            "455000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table13.AddRow(new string[] {
                            "440000",
                            "2018-01-01",
                            "2019-07-01",
                            "beschikking_vernietigd, beschikking_vernietigd"});
                table13.AddRow(new string[] {
                            "430000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table13.AddRow(new string[] {
                            "410000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 97
 testRunner.Given("een WOZ-object bevat de volgende waarden", ((string)(null)), table13, "Gegeven ");
#line hidden
#line 103
 testRunner.When("de relevante waarden zijn bepaald voor het WOZ-object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "vastgesteldeWaarde",
                            "waardepeildatum",
                            "ingangsdatum",
                            "beschikkingsStatussen"});
                table14.AddRow(new string[] {
                            "455000",
                            "2019-01-01",
                            "2020-01-01",
                            "beschikking_genomen"});
                table14.AddRow(new string[] {
                            "430000",
                            "2018-01-01",
                            "2019-01-01",
                            "beschikking_genomen"});
                table14.AddRow(new string[] {
                            "410000",
                            "2017-01-01",
                            "2018-01-01",
                            "beschikking_genomen"});
#line 104
 testRunner.Then("bevat het WOZ-object de volgende waarden", ((string)(null)), table14, "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BepaalRelevanteWaardenVoorEenWOZ_ObjectFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
