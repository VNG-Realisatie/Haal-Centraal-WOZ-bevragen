/*
 * Waardering onroerende zaken
 * Deze API levert actuele gegevens over WOZ-objecten 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * De status van een beschikking waarmee de waarde is vastgesteld. * &#x60;beschikking_genomen&#x60; - 01: beschikking genomen * &#x60;beschikking_vernietigd&#x60; - 02: vernietigingbeschikking * &#x60;beschikking_herzien&#x60; - 03: herzieningsbeschikking * &#x60;bezwaar_ingediend&#x60; - 10: bezwaar ingediend * &#x60;bezwaar_gehandhaafd&#x60; - 11: bezwaar afgehandeld, beschikking gehandhaafd * &#x60;bezwaar_veranderd&#x60; - 12: bezwaar afgehandeld, vastgestelde waarde veranderd * &#x60;waarde_ambtshalve_verminderd&#x60; - 13: waarde ambtshalve verminderd * &#x60;beroep_aangetekend&#x60; - 20: beroepaangetekend * &#x60;beroep_gehandhaafd&#x60; - 21: uitspraak beroep, beschikking gehandhaafd * &#x60;beroep_veranderd&#x60; - 22: uitspraak beroep, vastgestelde waarde veranderd * &#x60;hoger_beroep_aangetekend&#x60; - 23: hogerberoep aangetekend * &#x60;hoger_beroep_gehandhaafd&#x60; - 24: uitspraak hoger beroep, beschikking gehandhaafd * &#x60;hoger_beroep_veranderd&#x60; - 25: uitspraak hoger beroep, vastgestelde waarde veranderd * &#x60;cassatie_ingesteld&#x60; - 30: cassatie ingesteld * &#x60;hoge_raad_gehandhaafd&#x60; - 31: arrest Hoge Raad, beschikking gehandhaafd * &#x60;hoge_raad_veranderd&#x60; - 32: arrest Hoge Raad, vastgestelde waarde veranderd * &#x60;hoge_raad_geding_verwezen&#x60; - 33: arrestHogeRaad,geding verwezen * &#x60;voorlopige_aanslag&#x60; - 99: waarde te gebruiken voor voorlopige aanslag 
 */
@JsonAdapter(StatusBeschikkingEnum.Adapter.class)
public enum StatusBeschikkingEnum {
  
  BESCHIKKING_GENOMEN("beschikking_genomen"),
  
  BESCHIKKING_VERNIETIGD("beschikking_vernietigd"),
  
  BESCHIKKING_HERZIEN("beschikking_herzien"),
  
  BEZWAAR_INGEDIEND("bezwaar_ingediend"),
  
  BEZWAAR_GEHANDHAAFD("bezwaar_gehandhaafd"),
  
  BEZWAAR_VERANDERD("bezwaar_veranderd"),
  
  WAARDE_AMBTSHALVE_VERMINDERD("waarde_ambtshalve_verminderd"),
  
  BEROEP_AANGETEKEND("beroep_aangetekend"),
  
  BEROEP_GEHANDHAAFD("beroep_gehandhaafd"),
  
  BEROEP_VERANDERD("beroep_veranderd"),
  
  HOGER_BEROEP_AANGETEKEND("hoger_beroep_aangetekend"),
  
  HOGER_BEROEP_GEHANDHAAFD("hoger_beroep_gehandhaafd"),
  
  HOGER_BEROEP_VERANDERD("hoger_beroep_veranderd"),
  
  CASSATIE_INGESTELD("cassatie_ingesteld"),
  
  HOGE_RAAD_GEHANDHAAFD("hoge_raad_gehandhaafd"),
  
  HOGE_RAAD_VERANDERD("hoge_raad_veranderd"),
  
  HOGE_RAAD_GEDING_VERWEZEN("hoge_raad_geding_verwezen"),
  
  VOORLOPIGE_AANSLAG("voorlopige_aanslag");

  private String value;

  StatusBeschikkingEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static StatusBeschikkingEnum fromValue(String value) {
    for (StatusBeschikkingEnum b : StatusBeschikkingEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<StatusBeschikkingEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final StatusBeschikkingEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public StatusBeschikkingEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return StatusBeschikkingEnum.fromValue(value);
    }
  }
}

