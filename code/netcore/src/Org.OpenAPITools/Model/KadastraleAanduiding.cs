/*
 * Waardering onroerende zaken
 *
 * Deze API levert actuele gegevens over WOZ-objecten 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KadastraleAanduiding
    /// </summary>
    [DataContract(Name = "KadastraleAanduiding")]
    public partial class KadastraleAanduiding : IEquatable<KadastraleAanduiding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KadastraleAanduiding" /> class.
        /// </summary>
        /// <param name="gemeentecode">Waar het kadaster de kadastrale gemeentenaam hanteert in de KadstraleAanduiding is in de WOZ de gemeentecode gebruikt..</param>
        /// <param name="sectie">Sectie is een onderverdeling van de kadastrale gemeente, bedoeld om het werk van de meetdienst en de kadastrale kaarten overzichtelijk te houden. Per kadastrale gemeente zijn er max. 26x26 secties . Elke sectie heeft een of twee letters (bijv. \&quot;A\&quot;, &#39;B&#39;, ....&#39;AA&#39;, &#39;AB&#39;, ....&#39;ZZ&#39; . Alleen de sectieletter &#39;J&#39; wordt niet gebruikt om verwarring (handgeschreven) te voorkomen met &#39;I&#39;.</param>
        /// <param name="perceelnummer">Het perceelnummer dat een geheel perceel of een complex uniek identificeert binnen de sectie..</param>
        /// <param name="deelperceelnummer">deelperceelnummer.</param>
        /// <param name="appartementsindex">Nummer dat het kadastraal object uniek identificeert als een appartementsrecht binnen het complex..</param>
        public KadastraleAanduiding(string gemeentecode = default(string), string sectie = default(string), int perceelnummer = default(int), string deelperceelnummer = default(string), int appartementsindex = default(int))
        {
            this.Gemeentecode = gemeentecode;
            this.Sectie = sectie;
            this.Perceelnummer = perceelnummer;
            this.Deelperceelnummer = deelperceelnummer;
            this.Appartementsindex = appartementsindex;
        }

        /// <summary>
        /// Waar het kadaster de kadastrale gemeentenaam hanteert in de KadstraleAanduiding is in de WOZ de gemeentecode gebruikt.
        /// </summary>
        /// <value>Waar het kadaster de kadastrale gemeentenaam hanteert in de KadstraleAanduiding is in de WOZ de gemeentecode gebruikt.</value>
        [DataMember(Name = "gemeentecode", EmitDefaultValue = false)]
        public string Gemeentecode { get; set; }

        /// <summary>
        /// Sectie is een onderverdeling van de kadastrale gemeente, bedoeld om het werk van de meetdienst en de kadastrale kaarten overzichtelijk te houden. Per kadastrale gemeente zijn er max. 26x26 secties . Elke sectie heeft een of twee letters (bijv. \&quot;A\&quot;, &#39;B&#39;, ....&#39;AA&#39;, &#39;AB&#39;, ....&#39;ZZ&#39; . Alleen de sectieletter &#39;J&#39; wordt niet gebruikt om verwarring (handgeschreven) te voorkomen met &#39;I&#39;
        /// </summary>
        /// <value>Sectie is een onderverdeling van de kadastrale gemeente, bedoeld om het werk van de meetdienst en de kadastrale kaarten overzichtelijk te houden. Per kadastrale gemeente zijn er max. 26x26 secties . Elke sectie heeft een of twee letters (bijv. \&quot;A\&quot;, &#39;B&#39;, ....&#39;AA&#39;, &#39;AB&#39;, ....&#39;ZZ&#39; . Alleen de sectieletter &#39;J&#39; wordt niet gebruikt om verwarring (handgeschreven) te voorkomen met &#39;I&#39;</value>
        [DataMember(Name = "sectie", EmitDefaultValue = false)]
        public string Sectie { get; set; }

        /// <summary>
        /// Het perceelnummer dat een geheel perceel of een complex uniek identificeert binnen de sectie.
        /// </summary>
        /// <value>Het perceelnummer dat een geheel perceel of een complex uniek identificeert binnen de sectie.</value>
        [DataMember(Name = "perceelnummer", EmitDefaultValue = false)]
        public int Perceelnummer { get; set; }

        /// <summary>
        /// Gets or Sets Deelperceelnummer
        /// </summary>
        [DataMember(Name = "deelperceelnummer", EmitDefaultValue = false)]
        public string Deelperceelnummer { get; set; }

        /// <summary>
        /// Nummer dat het kadastraal object uniek identificeert als een appartementsrecht binnen het complex.
        /// </summary>
        /// <value>Nummer dat het kadastraal object uniek identificeert als een appartementsrecht binnen het complex.</value>
        [DataMember(Name = "appartementsindex", EmitDefaultValue = false)]
        public int Appartementsindex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KadastraleAanduiding {\n");
            sb.Append("  Gemeentecode: ").Append(Gemeentecode).Append("\n");
            sb.Append("  Sectie: ").Append(Sectie).Append("\n");
            sb.Append("  Perceelnummer: ").Append(Perceelnummer).Append("\n");
            sb.Append("  Deelperceelnummer: ").Append(Deelperceelnummer).Append("\n");
            sb.Append("  Appartementsindex: ").Append(Appartementsindex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KadastraleAanduiding);
        }

        /// <summary>
        /// Returns true if KadastraleAanduiding instances are equal
        /// </summary>
        /// <param name="input">Instance of KadastraleAanduiding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KadastraleAanduiding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gemeentecode == input.Gemeentecode ||
                    (this.Gemeentecode != null &&
                    this.Gemeentecode.Equals(input.Gemeentecode))
                ) && 
                (
                    this.Sectie == input.Sectie ||
                    (this.Sectie != null &&
                    this.Sectie.Equals(input.Sectie))
                ) && 
                (
                    this.Perceelnummer == input.Perceelnummer ||
                    this.Perceelnummer.Equals(input.Perceelnummer)
                ) && 
                (
                    this.Deelperceelnummer == input.Deelperceelnummer ||
                    (this.Deelperceelnummer != null &&
                    this.Deelperceelnummer.Equals(input.Deelperceelnummer))
                ) && 
                (
                    this.Appartementsindex == input.Appartementsindex ||
                    this.Appartementsindex.Equals(input.Appartementsindex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gemeentecode != null)
                    hashCode = hashCode * 59 + this.Gemeentecode.GetHashCode();
                if (this.Sectie != null)
                    hashCode = hashCode * 59 + this.Sectie.GetHashCode();
                hashCode = hashCode * 59 + this.Perceelnummer.GetHashCode();
                if (this.Deelperceelnummer != null)
                    hashCode = hashCode * 59 + this.Deelperceelnummer.GetHashCode();
                hashCode = hashCode * 59 + this.Appartementsindex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
